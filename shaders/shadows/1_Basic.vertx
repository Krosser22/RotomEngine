#version 330 core

layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec2 uv;

uniform mat4 u_model;
uniform mat4 u_view;
uniform mat4 u_projection;
uniform mat4 u_lightSpaceMatrix;

out vec3 fragmentPosition;
out vec3 normalDirection;
out vec2 uvMaterial;
out vec4 lightFragmentPosition;

void main() {
  //Position
	fragmentPosition = (u_model * vec4(position, 1.0f)).xyz;
	gl_Position = u_projection * u_view * u_model * vec4(position, 1.0f);

  //Normal
  normalDirection = transpose(inverse(mat3(u_model))) * normal;

  //Texture
  uvMaterial = uv;

  //Shadow
  lightFragmentPosition = u_lightSpaceMatrix * vec4(fragmentPosition, 1.0f);
};